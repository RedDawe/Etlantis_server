{"version":3,"sources":["App.js","serviceWorker.js","index.js","play_store_logo.png"],"names":["App","handleWindowSizeChange","setState","mobile","window","innerWidth","innerHeight","state","average","grades","weights","menu","handleGradeChange","bind","handleWeightsChange","grade_submit","event","this","target","value","grds","split","wghts","grades_array","weights_array","i","length","push","parseFloat","sum","div","preventDefault","addEventListener","fetch","then","response","text","removeEventListener","Helmet","allowedAttributes","allowedTags","html","id","href","src","psl","onSubmit","class","type","onChange","placeholder","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"js/main.fee6f827.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SanitizedHTML from 'react-sanitized-html';\nimport { Helmet } from 'react-helmet'\nimport psl from './play_store_logo.png'\n\nconst TITLE = 'Etlantis'\n\n\nclass App extends React.Component {\n    constructor(){\n        super();\n        this.state = {mobile : window.innerWidth < window.innerHeight, average: 0, grades: \"\", weights: \"\", menu: \"loading...\"};\n\n        this.handleGradeChange = this.handleGradeChange.bind(this);\n        this.handleWeightsChange = this.handleWeightsChange.bind(this);\n        this.grade_submit = this.grade_submit.bind(this);\n    }\n\n    handleGradeChange(event){\n        this.setState({grades: event.target.value});\n    }\n\n    handleWeightsChange(event){\n        this.setState({weights: event.target.value});\n    }\n\n    grade_submit(event) {\n        var grds = this.state.grades.split(\" \");\n        var wghts = this.state.weights.split(\" \");\n\n        var grades_array = [];\n        var weights_array = [];\n\n        for (var i = 0; i < grds.length; i++){\n            grades_array.push(parseFloat(grds[i]));\n            weights_array.push(parseFloat(wghts[i]));\n        }\n\n\n        var sum = 0;\n        var div = 0;\n        for (var i = 0; i < grades_array.length; i++){\n            sum += grades_array[i] * weights_array[i];\n            div += weights_array[i];\n        }\n\n        this.setState({average: sum/div});\n        event.preventDefault();\n    }\n\n    componentDidMount() {\n      window.addEventListener('resize', this.handleWindowSizeChange);\n      fetch('fetch/menu')\n        .then(response => response.text())\n        .then(menu => this.setState({menu}));\n    }\n\n    componentDidUnmount() {\n      window.removeEventListener('resize', this.handleWindowSizeChange);\n    }\n\n    handleWindowSizeChange = () => {\n      this.setState({mobile : window.innerWidth < window.innerHeight});\n    }\n\n    render(){\n    if (this.state.mobile){\n        return(\n          <>\n            <Helmet>\n              <title>{ TITLE }</title>\n            </Helmet>\n            <SanitizedHTML allowedAttributes={{ 'a': ['href', 'class'], 'div': ['id'], 'img': ['id', 'src'] }} allowedTags={['a', 'div', 'img']} html={ this.state.menu } />\n            <p id=\"main_text\">\n            Hey,<br></br>\n            seems like you're in luck today. You're on a phone so you can get the full app by clicking the play store logo below.\n            </p>\n            <a href=\"https://play.google.com/store/apps/details?id=etlantis.gradecalculator\"><img id=\"psl\" src={psl}/></a>\n            <br></br>\n            <a href=\"https://github.com/RedDawe/GradeCalculator\"><img id=\"github_link\" src=\"static/githublogo.png\" /></a>\n          </>\n        )\n    }\n    else{\n        return(\n          <>\n            <Helmet>\n              <title>{ TITLE }</title>\n            </Helmet>\n            <SanitizedHTML allowedAttributes={{ 'a': ['href', 'class'], 'div': ['id'], 'img': ['id', 'src'] }} allowedTags={['a', 'div', 'img']} html={ this.state.menu } />\n            <p id=\"main_p\">\n                This is a preview page for the Grade Calculator app. You can get the full app by clicking the play store logo below.\n            </p>\n\n            <form onSubmit={this.grade_submit}>\n                <p class=\"labels\">Grades</p>\n                <input type=\"text\" value={this.state.grades} onChange={this.handleGradeChange} placeholder=\"2 1 2.5 1\"/>\n                <p class=\"labels\">Weights</p>\n                <input type=\"text\" value={this.state.weights} onChange={this.handleWeightsChange} placeholder=\"1 2 1 1\"/>\n                <input type=\"submit\" value=\"Calculate\" />\n            </form>\n\n            <p id=\"result\">\n                {this.state.average}\n            </p>\n            <a href=\"https://play.google.com/store/apps/details?id=etlantis.gradecalculator\"><img id=\"psl\" src={psl}/></a>\n            <br></br>\n            <a href=\"https://github.com/RedDawe/GradeCalculator\"><img id=\"github_link\" src=\"static/githublogo.png\" /></a>\n          </>\n        )\n    }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"media/play_store_logo.b4c508ba.png\";"],"sourceRoot":""}